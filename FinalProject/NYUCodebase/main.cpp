#ifdef _WINDOWS
#include <GL/glew.h>
#endif
#include <SDL.h>
#include <SDL_opengl.h>
#include <SDL_image.h>
#include <SDL_mixer.h>

#include "ShaderProgram.h"
#include "Matrix.h"

#include <vector>
#include <fstream>
#include <string>
#include <iostream>
#include <sstream>

#define LEVEL_HEIGHT 32
#define LEVEL_WIDTH 128
#define SPRITE_COUNT_X 30
#define SPRITE_COUNT_Y 30
#define TILE_SIZE 0.25f
#define FRICTION_X 4.0f
#define FRICTION_Y 0.0f
#define GRAVITY_X 0.0f
#define GRAVITY_Y -3.0f
#define FIXED_TIMESTEP 0.0166666f
#define MAX_TIMESTEPS 6

enum GameState { MAIN_MENU = 0, INSTRUCTIONS = 1, LEVEL_ONE_LOAD = 2, LEVEL_ONE = 3, LEVEL_TWO_LOAD = 4, LEVEL_TWO = 5, LEVEL_THREE_LOAD = 6, LEVEL_THREE = 7, VICTORY = 8, GAME_OVER = 9 };

using namespace std;

#ifdef _WINDOWS
#define RESOURCE_FOLDER ""
#else
#define RESOURCE_FOLDER "NYUCodebase.app/Contents/Resources/"
#endif

SDL_Window* displayWindow;

// Purposely left empty
// Values are loaded into it and the renderMap() function will read from this array
unsigned int levelData[LEVEL_HEIGHT][LEVEL_WIDTH];

// Values for the first level
unsigned int level1Data[LEVEL_HEIGHT][LEVEL_WIDTH] = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 0, 0 },
{ 123, 123, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 125, 125 },
{ 153, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 0, 0, 0, 0, 0, 631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 0, 0, 0, 0, 669, 670, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 0, 0, 0, 669, 670, 670, 670, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 0, 0, 0, 0, 0, 634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 669, 670, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 0, 0, 18, 0, 0, 632, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 669, 670, 670, 670, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 669, 670, 670, 670, 670, 670, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 124, 124, 124, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155 },
{ 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 123, 123, 123, 123, 123, 123, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 123, 123, 123, 123, 123, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 669, 670, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 127, 125, 153, 153, 153, 153, 153, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 155, 155 },
{ 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 153, 153, 153, 153, 153, 153, 153, 124, 128, 644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 669, 670, 670, 670, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 127, 125, 153, 153, 153, 153, 153, 153, 153, 153, 128, 0, 0, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 138, 18, 0, 155, 155 },
{ 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 18, 0, 18, 0, 0, 0, 18, 0, 0, 127, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 123, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 632, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 129, 129, 129, 0, 0, 126, 122, 122, 122, 122, 122, 122, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 124, 124, 124, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 123, 123, 123, 123, 123, 155, 155 },
{ 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 123, 123, 123, 123, 123, 123, 123, 123, 123, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 123, 123, 123, 156, 0, 0, 0, 126, 123, 123, 123, 123, 123, 123, 156, 0, 0, 0, 126, 122, 122, 122, 156, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 129, 129, 0, 0, 0, 0, 0, 0, 0, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 0, 0, 129, 129, 0, 0, 0, 18, 0, 129, 129, 0, 0, 0, 155, 155, 155, 155, 155, 155, 155 },
{ 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 0, 0, 0, 0, 0, 155, 155, 155, 155, 155, 155, 0, 0, 0, 0, 0, 153, 153, 153, 0, 0, 0, 129, 129, 129, 0, 0, 0, 0, 0, 129, 129, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 0, 0, 0, 0, 0, 129, 129, 129, 0, 0, 0, 0, 0, 0, 155, 155, 155, 155, 155, 155, 155 },
{ 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 0, 0, 0, 0, 0, 155, 155, 155, 155, 155, 155, 0, 0, 0, 0, 0, 153, 153, 153, 0, 0, 0, 0, 0, 0, 0, 129, 129, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 155, 155, 155, 155, 155, 155 },
{ 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 71, 71, 71, 71, 71, 155, 155, 155, 155, 155, 155, 71, 71, 71, 71, 71, 153, 153, 153, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 153, 153, 153, 153, 153, 153, 153, 153, 155, 155, 153, 153, 153, 153, 155, 155, 153, 153, 153, 153, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 153, 155, 155, 155, 155, 155, 155 },
{},
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };

// Values for the second level
unsigned int level2Data[LEVEL_HEIGHT][LEVEL_WIDTH] = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 302, 302, 302, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 0, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 302, 302, 302, 302, 302, 302, 302, 336, 0, 0, 0, 309, 309, 0, 0, 0, 0, 0, 0, 0, 457, 0, 0, 0, 0, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 302, 302, 302, 302, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 302, 302, 302, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 333, 333, 333, 333, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 456, 0, 0, 0, 0, 309, 309, 0, 0, 0, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 333, 333, 333, 0, 0, 0, 0, 0, 306, 308, 461, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 333, 333, 333, 333, 308, 457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 333, 333, 333, 333, 333, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 333, 333, 333, 0, 0, 0, 0, 309, 309, 0, 0, 0, 0, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 333, 303, 303, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 333, 333, 333, 333, 333, 302, 302, 336, 0, 0, 0, 0, 0, 0, 461, 307, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 333, 333, 333, 333, 308, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333 },
{ 333, 333, 333, 333, 333, 333, 333, 333, 0, 0, 0, 0, 306, 302, 304, 304, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 333, 333, 333, 333, 333, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 459, 0, 0, 0, 0, 309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 460, 0, 0, 0, 0, 0, 309, 309, 0, 0, 0, 0, 0, 137, 0, 0, 333 },
{ 333, 333, 333, 333, 333, 333, 333, 333, 0, 0, 0, 0, 0, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 333, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 303, 303, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 138, 0, 0, 333 },
{ 333, 333, 333, 333, 333, 333, 333, 333, 71, 71, 71, 71, 71, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 333, 333, 333, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 333, 333, 333, 333, 71, 71, 71, 71, 71, 71, 333, 333, 333, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 303, 303, 303, 303, 303, 333 },
{},
{},
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };

// Values for the third level
unsigned int level3Data[LEVEL_HEIGHT][LEVEL_WIDTH] = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 489, 489, 489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 482, 482, 482, 516, 0, 0, 0, 486, 482, 483, 483, 516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 486, 483, 483, 516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 513, 513, 513, 0, 0, 0, 0, 0, 513, 513, 513, 0, 0, 0, 0, 603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 489, 489, 489, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 0, 602, 0, 0, 0, 0, 0, 486, 482, 516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 513, 513, 513, 0, 0, 0, 0, 0, 513, 513, 513, 0, 0, 0, 489, 489, 489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 486, 483, 483, 516, 0, 0, 0, 0, 0, 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 513, 513, 513, 0, 0, 0, 0, 0, 513, 513, 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 513, 513, 513, 575, 575, 575, 575, 575, 513, 513, 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 489, 489, 489, 0, 0, 0, 0, 0, 0, 0, 489, 489, 489, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 0, 0, 0, 0, 486, 482, 482, 482, 488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 0, 0, 0, 0, 0, 513, 513, 513, 513, 488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 603, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 513, 513, 0, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 0, 0, 0, 0, 0, 513, 513, 513, 513, 513, 488, 0, 0, 0, 0, 0, 0, 0, 487, 483, 483, 483, 483, 483, 483, 483, 483, 488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 487, 483, 483, 483, 488, 0, 601, 487, 483, 483, 488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 513 },
{ 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 0, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 575, 575, 575, 575, 575, 513, 513, 513, 513, 513, 513, 488, 0, 0, 601, 0, 0, 487, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 487, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 552, 553, 554, 0, 513 },
{ 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 0, 0, 0, 0, 0, 0, 513, 513, 0, 0, 0, 0, 0, 0, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 483, 483, 483, 483, 483, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 488, 0, 0, 0, 0, 0, 0, 487, 483, 483, 483, 488, 0, 0, 0, 0, 0, 0, 487, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 488, 0, 0, 0, 0, 0, 0, 0, 0, 582, 583, 584, 0, 513 },
{ 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 575, 575, 575, 575, 575, 575, 513, 513, 575, 575, 575, 575, 575, 575, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 488, 0, 0, 601, 0, 487, 513, 513, 513, 513, 513, 488, 0, 0, 0, 0, 487, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 516, 0, 0, 0, 0, 0, 486, 483, 483, 483, 483, 483, 513 },
{ 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 482, 482, 482, 482, 513, 513, 513, 513, 513, 513, 513, 488, 0, 0, 487, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 0, 0, 0, 0, 0, 0, 0, 513, 513, 513, 513, 513, 513 },
{},
{},
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };

// Function provided to us by Ivan
// Loads a texture to a applied to a polygon
GLuint LoadTexture(const char *image_path){
	SDL_Surface *surface = IMG_Load(image_path);
	GLuint textureID;
	glGenTextures(1, &textureID);
	glBindTexture(GL_TEXTURE_2D, textureID);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, surface->w, surface->h, 0, GL_RGBA, GL_UNSIGNED_BYTE, surface->pixels);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	SDL_FreeSurface(surface);
	return textureID;
}

// Function provided to us by Ivan
// Draws text
void drawText(ShaderProgram *program, int fontTexture, std::string text, float size, float spacing, float xPos, float yPos) {
	float texture_size = 1.0f / 16.0f;
	vector<float> vertexData;
	vector<float> texCoordData;
	Matrix modelMatrix;
	for (int i = 0; i < text.size(); i++) {
		float texture_x = (float)(((int)text[i]) % 16) / 16.0f;
		float texture_y = (float)(((int)text[i]) / 16) / 16.0f;
		vertexData.insert(vertexData.end(), {
			((size + spacing) * i) + (-0.5f * size), 0.5f * size,
			((size + spacing) * i) + (-0.5f * size), -0.5f * size,
			((size + spacing) * i) + (0.5f * size), 0.5f * size,
			((size + spacing) * i) + (0.5f * size), -0.5f * size,
			((size + spacing) * i) + (0.5f * size), 0.5f * size,
			((size + spacing) * i) + (-0.5f * size), -0.5f * size });
		texCoordData.insert(texCoordData.end(), {
			texture_x, texture_y,
			texture_x, texture_y + texture_size,
			texture_x + texture_size, texture_y,
			texture_x + texture_size, texture_y + texture_size,
			texture_x + texture_size, texture_y,
			texture_x, texture_y + texture_size });
	}
	glUseProgram(program->programID);
	glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertexData.data());
	glEnableVertexAttribArray(program->positionAttribute);
	glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoordData.data());
	glEnableVertexAttribArray(program->texCoordAttribute);
	glBindTexture(GL_TEXTURE_2D, fontTexture);
	modelMatrix.identity();
	modelMatrix.Translate(xPos, yPos, 0.0f);
	program->setModelMatrix(modelMatrix);
	glDrawArrays(GL_TRIANGLES, 0, text.size() * 6);
	glDisableVertexAttribArray(program->positionAttribute);
	glDisableVertexAttribArray(program->texCoordAttribute);
}

// Function provided to us by Ivan
// Draws the map
void renderMap(ShaderProgram *program, int textureMap) {
	vector<float> vertexData;
	vector<float> texCoordData;
	Matrix modelMatrix;
	for (int y = 0; y < LEVEL_HEIGHT; y++) {
		for (int x = 0; x < LEVEL_WIDTH; x++) {
			if (levelData[y][x] != 0) {
				float u = (float)(((int)levelData[y][x] -1) % SPRITE_COUNT_X) / (float)SPRITE_COUNT_X;
				float v = (float)(((int)levelData[y][x]) / SPRITE_COUNT_X) / (float)SPRITE_COUNT_Y;
				float spriteWidth = 1.0f / (float)SPRITE_COUNT_X;
				float spriteHeight = 1.0f / (float)SPRITE_COUNT_Y;
				vertexData.insert(vertexData.end(), {
				
					TILE_SIZE * x, -TILE_SIZE * y,
					TILE_SIZE * x, (-TILE_SIZE * y) - TILE_SIZE,
					(TILE_SIZE * x) + TILE_SIZE, (-TILE_SIZE * y) - TILE_SIZE,

					TILE_SIZE * x, -TILE_SIZE * y,
					(TILE_SIZE * x) + TILE_SIZE, (-TILE_SIZE * y) - TILE_SIZE,
					(TILE_SIZE * x) + TILE_SIZE, -TILE_SIZE * y
				});

				texCoordData.insert(texCoordData.end(), {
				
				u, v,
				u, v + (spriteHeight),
				u + spriteWidth, v + (spriteHeight),

				u, v,
				u+spriteWidth, v+spriteHeight,
				u+spriteWidth, v
				});
			}
		}
	}

	glUseProgram(program->programID);
	glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertexData.data());
	glEnableVertexAttribArray(program->positionAttribute);
	glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoordData.data());
	glEnableVertexAttribArray(program->texCoordAttribute);
	glBindTexture(GL_TEXTURE_2D, textureMap);
	program->setModelMatrix(modelMatrix);
	glDrawArrays(GL_TRIANGLES, 0, vertexData.size() / 2);
	glDisableVertexAttribArray(program->positionAttribute);
	glDisableVertexAttribArray(program->texCoordAttribute);
}

// Function provided to us by Ivan
// Used to calculate movement
float lerp(float v0, float v1, float t) {
	return (1.0f - t)*v0 + t*v1;
}

// Entity class
// Basically the class that is the player
class Entity {
public:

	// Constructor
	Entity(std::vector<float> position, std::vector<float> velocity, vector<float> acceleration, vector<float> size, float rotation, int spriteSheetTexture, int index, 
		bool alive = TRUE, bool levelComplete = FALSE, bool collidedBottom = FALSE, bool landed = FALSE) :
		position(position), velocity(velocity), acceleration(acceleration), size(size), rotation(rotation), spriteSheetTexture(spriteSheetTexture), index(index), 
		alive(alive), levelComplete(levelComplete), collidedBottom(collidedBottom), landed(landed) {};

	// Function to draw the entity
	// Pretty much just draws from a uniform sprite sheet
	void Draw(ShaderProgram *program) {
		float u = (float)(((int)index) % SPRITE_COUNT_X) / (float)SPRITE_COUNT_X;
		float v = (float)(((int)index) / SPRITE_COUNT_X) / (float)SPRITE_COUNT_Y;
		float spriteWidth = 1.0f / (float)SPRITE_COUNT_X;
		float spriteHeight = 1.0f / (float)SPRITE_COUNT_Y;
		Matrix modelMatrix;

		float vertices[] = { -0.25f, -0.25f, 0.25f, 0.25f, -0.25f, 0.25f, 0.25f, 0.25f, -0.25f, -0.25f, 0.25f, -0.25f };

		GLfloat texCoords[] = {
			u, v + spriteHeight,
			u + spriteWidth, v,
			u, v,
			u + spriteWidth, v,
			u, v + spriteHeight,
			u + spriteWidth, v + spriteHeight
		};

		glUseProgram(program->programID);
		glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertices);
		glEnableVertexAttribArray(program->positionAttribute);
		glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoords);
		glEnableVertexAttribArray(program->texCoordAttribute);
		glBindTexture(GL_TEXTURE_2D, spriteSheetTexture);
		modelMatrix.identity();
		modelMatrix.Translate(position[0], position[1], 0.0f);
		program->setModelMatrix(modelMatrix);
		glDrawArrays(GL_TRIANGLES, 0, 6);
		glDisableVertexAttribArray(program->positionAttribute);
		glDisableVertexAttribArray(program->texCoordAttribute);
	};

	// Updates the entity's position by calculating aacceleration, velocity, friction, etc
	// Also checks for collisions
	void Update(float elapsed) {
		velocity[1] = lerp(velocity[1], 0.0f, elapsed*FRICTION_Y);
		velocity[1] += GRAVITY_Y * elapsed;
		velocity[1] += acceleration[1] * elapsed;
		position[1] += velocity[1] * elapsed;
		collisionY();
		velocity[0] = lerp(velocity[0], 0.0f, elapsed * FRICTION_X);
		velocity[0] += GRAVITY_X * elapsed;
		velocity[0] += acceleration[0] * elapsed;
		position[0] += velocity[0] * elapsed;
		collisionX();
	}

	std::vector<float> position; // Vector of the entity's X and Y position
	std::vector<float> velocity; // Vector of the entity's X and Y velocity
	std::vector<float> acceleration; // Vector of the entity's X and Y acceleration
	std::vector<float> size; // Vector of the entity's width and height
	float rotation; // Entity's rotation
	int spriteSheetTexture; // Spritesheet that the entity is being drawn from
	int index; // Entity's position in the spritesheet
	bool alive; // Boolean flag to signal when the player has died
	bool levelComplete; // Boolean flag to signal when the player has finished the level
	bool collidedBottom; // Boolean flag to signal when the player is grounded
	bool landed; // Boolean flag to signal when the player has gone from in the air to on the ground

private:

	// Function to convert entity's world position to it's X position reltive to the tilemap
	int worldToTileX(float positionX) {
		int worldX = (int)(positionX / TILE_SIZE);
		if (worldX < 0 || worldX > LEVEL_WIDTH) {
			return 0;
		}
		else {
			return worldX;
		}
	}
	
	// Function to convert entity's world position to it's Y position relative to the tilemap
	int worldToTileY(float positionY) {
		int worldY = (int)(-positionY / TILE_SIZE);
		if (worldY < 0 || worldY > LEVEL_HEIGHT) {
			return 0;
		}
		else {
			return worldY;
		}
	}

	// Detects collisions on the Y axis
	void collisionY() {
		// Bottom first
		int bottomLeftBlock = levelData[worldToTileY(position[1] - size[1]/2)][worldToTileX(position[0] - size[0]/2)]; // Tile that the bottom left corner is touching
		int bottomRightBlock = levelData[worldToTileY(position[1] - size[1]/2)][worldToTileX(position[0] + size[0]/2)]; // Tile that the bottom right corner is touching
		// If the entity is touching any of the doors, then the player has completed the level
		if (bottomLeftBlock == 137 || bottomRightBlock == 137 || bottomLeftBlock == 138 || bottomRightBlock == 138 || bottomLeftBlock == 584 || bottomRightBlock == 584) {
			levelComplete = 1; // Changes boolean flag, causing the level to advance
		}
		// If the entity is touching any spikes, then the player is dead
		if (bottomLeftBlock == 71 || bottomRightBlock == 71 || bottomLeftBlock == 575 || bottomRightBlock == 575) {
			alive = 0; // Changes boolean flag, causing the game to advance to the game over stage
		}
		else {
			// If one of the bottom corners is touching a solid tile
			if (bottomLeftBlock == 101 || bottomLeftBlock == 122 || bottomLeftBlock == 123 || bottomLeftBlock == 124 || bottomLeftBlock == 126 || bottomLeftBlock == 127 ||
				bottomLeftBlock == 128 || bottomLeftBlock == 129 || bottomLeftBlock == 153 || bottomLeftBlock == 155 || bottomLeftBlock == 156 || bottomLeftBlock == 333 || 
				bottomLeftBlock == 302 || bottomLeftBlock == 308 || bottomLeftBlock == 336 || bottomLeftBlock == 306 || bottomLeftBlock == 307 || bottomLeftBlock == 309 || 
				bottomLeftBlock == 304 || bottomLeftBlock == 513 || bottomLeftBlock == 482 || bottomLeftBlock == 516 || bottomLeftBlock == 486 || bottomLeftBlock == 483 || 
				bottomLeftBlock == 489 || bottomLeftBlock == 488|| bottomLeftBlock == 487){
				// Calculate how far it is penetrating the solid tile
				float penetration = fabs((-TILE_SIZE * (worldToTileY(position[1]) + 1)) - (position[1] - size[1] / 2));
				position[1] += (penetration + 0.001); // Adjust position by that much
				velocity[1] = 0.0f; // Set velocity to 0
				if (!collidedBottom) { // If it was previously in the air and is now touching the bottom, update boolean flags
					collidedBottom = TRUE;
					landed = TRUE;
				}
			}
			// Now check the other bottom corner
			else if (bottomRightBlock == 101 || bottomRightBlock == 122 || bottomRightBlock == 123 || bottomRightBlock == 124 || bottomRightBlock == 126 || bottomRightBlock == 127 ||
				bottomRightBlock == 128 || bottomRightBlock == 129 || bottomRightBlock == 153 || bottomRightBlock == 155 || bottomRightBlock == 156 || bottomRightBlock == 333 ||
				bottomRightBlock == 302 || bottomRightBlock == 308 || bottomRightBlock == 336 || bottomRightBlock == 306 || bottomRightBlock == 307 || bottomRightBlock == 309 ||
				bottomRightBlock == 304 || bottomRightBlock == 513 || bottomRightBlock == 482 || bottomRightBlock == 516 || bottomRightBlock == 486 || bottomRightBlock == 483 ||
				bottomRightBlock == 489 || bottomRightBlock == 488 || bottomRightBlock == 487) {
				float penetration = fabs((-TILE_SIZE * (worldToTileY(position[1]) + 1)) - (position[1] - size[1] / 2));
				position[1] += (penetration + 0.001);
				velocity[1] = 0.0f;
				if (!collidedBottom) {
					collidedBottom = TRUE;
					landed = TRUE;
				}
			}
		}
		// Next we do the top
		int topLeftBlock = levelData[worldToTileY(position[1] + size[1] / 2)][worldToTileX(position[0] - size[0] / 2)];
		int topRightBlock = levelData[worldToTileY(position[1] + size[1] / 2)][worldToTileX(position[0] + size[0] / 2)];
		if (topLeftBlock == 137 || topRightBlock == 137 || topLeftBlock == 138 || topRightBlock == 138 || topLeftBlock == 584 || topRightBlock == 584) {
			levelComplete = 1;
		}
		if (topLeftBlock == 71 || topRightBlock == 71 || topLeftBlock == 575 || topRightBlock == 575) {
			alive = 0;
		}
		else {
			if (topLeftBlock == 101 || topLeftBlock == 122 || topLeftBlock == 123 || topLeftBlock == 124 || topLeftBlock == 126 || topLeftBlock == 127 ||
				topLeftBlock == 128 || topLeftBlock == 129 || topLeftBlock == 153 || topLeftBlock == 155 || topLeftBlock == 156 || topLeftBlock == 333 ||
				topLeftBlock == 302 || topLeftBlock == 308 || topLeftBlock == 336 || topLeftBlock == 306 || topLeftBlock == 307 || topLeftBlock == 309 ||
				topLeftBlock == 304 || topLeftBlock == 513 || topLeftBlock == 482 || topLeftBlock == 516 || topLeftBlock == 486 || topLeftBlock == 483 ||
				topLeftBlock == 489 || topLeftBlock == 488 || topLeftBlock == 487) {
				float penetration = fabs((position[1] + size[1] / 2) - ((-TILE_SIZE * (worldToTileY(position[1]) - 1) - TILE_SIZE)));
				position[1] -= (penetration + 0.001);
				velocity[1] = 0.0f;
			}
			else if (topRightBlock == 101 || topRightBlock == 122 || topRightBlock == 123 || topRightBlock == 124 || topRightBlock == 126 || topRightBlock == 127 ||
				topRightBlock == 128 || topRightBlock == 129 || topRightBlock == 153 || topRightBlock == 155 || topRightBlock == 156 || topRightBlock == 333 ||
				topRightBlock == 302 || topRightBlock == 308 || topRightBlock == 336 || topRightBlock == 306 || topRightBlock == 307 || topRightBlock == 309 ||
				topRightBlock == 304 || topRightBlock == 513 || topRightBlock == 482 || topRightBlock == 516 || topRightBlock == 486 || topRightBlock == 483 ||
				topRightBlock == 489 || topRightBlock == 488 || topRightBlock == 487) {
				float penetration = fabs((position[1] + size[1] / 2) - ((-TILE_SIZE * (worldToTileY(position[1]) - 1) - TILE_SIZE)));
				position[1] -= (penetration + 0.001);
				velocity[1] = 0.0f;
			}
		}
	}

	// Detects collisions on the X axis, similar to the previous collision function
	void collisionX() {
		int leftTopBlock = levelData[worldToTileY(position[1] + size[1] / 2)][worldToTileX(position[0] - size[0] / 2)];
		int leftBottomBlock = levelData[worldToTileY(position[1] - size[1] / 2)][worldToTileX(position[0] - size[0] / 2)];
		if (leftTopBlock == 137 || leftBottomBlock == 137 || leftTopBlock == 138 || leftBottomBlock == 138 || leftTopBlock == 584 || leftBottomBlock == 584) {
			levelComplete = 1;
		}
		if (leftTopBlock == 71 || leftBottomBlock == 71 || leftTopBlock == 575 || leftBottomBlock == 575) {
			alive = 0;
		}
		else {
			if (leftTopBlock == 101 || leftTopBlock == 122 || leftTopBlock == 123 || leftTopBlock == 124 || leftTopBlock == 126 || leftTopBlock == 127 ||
				leftTopBlock == 128 || leftTopBlock == 129 || leftTopBlock == 153 || leftTopBlock == 155 || leftTopBlock == 156 || leftTopBlock == 333 ||
				leftTopBlock == 302 || leftTopBlock == 308 || leftTopBlock == 336 || leftTopBlock == 306 || leftTopBlock == 307 || leftTopBlock == 309 ||
				leftTopBlock == 304 || leftTopBlock == 513 || leftTopBlock == 482 || leftTopBlock == 516 || leftTopBlock == 486 || leftTopBlock == 483 ||
				leftTopBlock == 489 || leftTopBlock == 488 || leftTopBlock == 487) {
				float penetration = fabs(((TILE_SIZE * (worldToTileX(position[0]) - 1)) + TILE_SIZE) - (position[0] - size[0] / 2));
				position[0] += (penetration + 0.001);
				velocity[0] = 0.0f;
			}
			else if (leftBottomBlock == 101 || leftBottomBlock == 122 || leftBottomBlock == 123 || leftBottomBlock == 124 || leftBottomBlock == 126 || leftBottomBlock == 127 ||
				leftBottomBlock == 128 || leftBottomBlock == 129 || leftBottomBlock == 153 || leftBottomBlock == 155 || leftBottomBlock == 156 || leftBottomBlock == 333 ||
				leftBottomBlock == 302 || leftBottomBlock == 308 || leftBottomBlock == 336 || leftBottomBlock == 306 || leftBottomBlock == 307 || leftBottomBlock == 309 ||
				leftBottomBlock == 304 || leftBottomBlock == 513 || leftBottomBlock == 482 || leftBottomBlock == 516 || leftBottomBlock == 486 || leftBottomBlock == 483 ||
				leftBottomBlock == 489 || leftBottomBlock == 488 || leftBottomBlock == 487) {
				float penetration = fabs(((TILE_SIZE * (worldToTileX(position[0]) - 1)) + TILE_SIZE) - (position[0] - size[0] / 2));
				position[0] += (penetration + 0.001);
				velocity[0] = 0.0f;
			}
		}
		int rightTopBlock = levelData[worldToTileY(position[0] + size[0] / 2)][worldToTileX(position[1] + size[1] / 2)];
		int rightBottomBlock = levelData[worldToTileY(position[0] - size[0] / 2)][worldToTileX(position[1] + size[1] / 2)];
		if (rightTopBlock == 137 || rightBottomBlock == 137 || rightTopBlock == 138 || rightBottomBlock == 138 || rightTopBlock == 584 || rightBottomBlock == 584) {
			levelComplete = 1;
		}
		if (rightTopBlock == 71 || rightBottomBlock == 71 || rightTopBlock == 575 || rightBottomBlock == 575) {
			alive = 0;
		}
		else {
			if (rightTopBlock == 101 || rightTopBlock == 122 || rightTopBlock == 123 || rightTopBlock == 124 || rightTopBlock == 126 || rightTopBlock == 127 ||
				rightTopBlock == 128 || rightTopBlock == 129 || rightTopBlock == 153 || rightTopBlock == 155 || rightTopBlock == 156 || rightTopBlock == 333 ||
				rightTopBlock == 302 || rightTopBlock == 308 || rightTopBlock == 336 || rightTopBlock == 306 || rightTopBlock == 307 || rightTopBlock == 309 ||
				rightTopBlock == 304 || rightTopBlock == 513 || rightTopBlock == 482 || rightTopBlock == 516 || rightTopBlock == 486 || rightTopBlock == 483 ||
				rightTopBlock == 489 || rightTopBlock == 488 || rightTopBlock == 487) {
				float penetration = fabs((position[0] + size[0] / 2) - (TILE_SIZE * (worldToTileX(position[0]) - 1)));
				position[0] -= (penetration + 0.001);
				velocity[0] = 0.0f;
			}
			else if (rightBottomBlock == 101 || rightBottomBlock == 122 || rightBottomBlock == 123 || rightBottomBlock == 124 || rightBottomBlock == 126 || rightBottomBlock == 127 ||
				rightBottomBlock == 128 || rightBottomBlock == 129 || rightBottomBlock == 153 || rightBottomBlock == 155 || rightBottomBlock == 156 || rightBottomBlock == 333 ||
				rightBottomBlock == 302 || rightBottomBlock == 308 || rightBottomBlock == 336 || rightBottomBlock == 306 || rightBottomBlock == 307 || rightBottomBlock == 309 ||
				rightBottomBlock == 304 || rightBottomBlock == 513 || rightBottomBlock == 482 || rightBottomBlock == 516 || rightBottomBlock == 486 || rightBottomBlock == 483 ||
				rightBottomBlock == 489 || rightBottomBlock == 488 || rightBottomBlock == 487) {
				float penetration = fabs((position[0] + size[0] / 2) - (TILE_SIZE * (worldToTileX(position[0]) - 1)));
				position[0] -= (penetration + 0.001);
				velocity[0] = 0.0f;
			}
		}
	}
};

// Enemy class
// Simplified entity class
// No boolean flags
class Enemy {
public:
	Enemy(std::vector<float> position, std::vector<float> velocity, vector<float> acceleration, vector<float> size, float rotation, int spriteSheetTexture, int index) : 
		position(position), velocity(velocity), acceleration(acceleration), size(size), rotation(rotation), spriteSheetTexture(spriteSheetTexture), index(index) {};

	void Draw(ShaderProgram *program) {
		float u = (float)(((int)index) % SPRITE_COUNT_X) / (float)SPRITE_COUNT_X;
		float v = (float)(((int)index) / SPRITE_COUNT_X) / (float)SPRITE_COUNT_Y;
		float spriteWidth = 1.0f / (float)SPRITE_COUNT_X;
		float spriteHeight = 1.0f / (float)SPRITE_COUNT_Y;
		Matrix modelMatrix;

		float vertices[] = { -0.25f, -0.25f, 0.25f, 0.25f, -0.25f, 0.25f, 0.25f, 0.25f, -0.25f, -0.25f, 0.25f, -0.25f };

		GLfloat texCoords[] = {
			u, v + spriteHeight,
			u + spriteWidth, v,
			u, v,
			u + spriteWidth, v,
			u, v + spriteHeight,
			u + spriteWidth, v + spriteHeight
		};

		glUseProgram(program->programID);
		glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertices);
		glEnableVertexAttribArray(program->positionAttribute);
		glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoords);
		glEnableVertexAttribArray(program->texCoordAttribute);
		glBindTexture(GL_TEXTURE_2D, spriteSheetTexture);
		modelMatrix.identity();
		modelMatrix.Translate(position[0], position[1], 0.0f);
		program->setModelMatrix(modelMatrix);
		glDrawArrays(GL_TRIANGLES, 0, 6);
		glDisableVertexAttribArray(program->positionAttribute);
		glDisableVertexAttribArray(program->texCoordAttribute);
	};

	void Update(float elapsed) {
		velocity[1] = lerp(velocity[1], 0.0f, elapsed*FRICTION_Y);
		velocity[1] += GRAVITY_Y * elapsed;
		velocity[1] += acceleration[1] * elapsed;
		position[1] += velocity[1] * elapsed;
		collisionY();
		velocity[0] = lerp(velocity[0], 0.0f, elapsed * FRICTION_X);
		velocity[0] += GRAVITY_X * elapsed;
		velocity[0] += acceleration[0] * elapsed;
		position[0] += velocity[0] * elapsed;
		collisionX();
	}

	std::vector<float> position;
	std::vector<float> velocity;
	std::vector<float> acceleration;
	std::vector<float> size;
	float rotation;
	int spriteSheetTexture;
	int index;

private:

	int worldToTileX(float positionX) {
		int worldX = (int)(positionX / TILE_SIZE);
		if (worldX < 0 || worldX > LEVEL_WIDTH) {
			return 0;
		}
		else {
			return worldX;
		}
	}

	int worldToTileY(float positionY) {
		int worldY = (int)(-positionY / TILE_SIZE);
		if (worldY < 0 || worldY > LEVEL_HEIGHT) {
			return 0;
		}
		else {
			return worldY;
		}
	}

	void collisionY() {
		int bottomLeftBlock = levelData[worldToTileY(position[1] - size[1] / 2)][worldToTileX(position[0] - size[0] / 2)];
		int bottomRightBlock = levelData[worldToTileY(position[1] - size[1] / 2)][worldToTileX(position[0] + size[0] / 2)];
		if (bottomLeftBlock == 101 || bottomLeftBlock == 122 || bottomLeftBlock == 123 || bottomLeftBlock == 124 || bottomLeftBlock == 126 || bottomLeftBlock == 127 ||
			bottomLeftBlock == 128 || bottomLeftBlock == 129 || bottomLeftBlock == 153 || bottomLeftBlock == 155 || bottomLeftBlock == 156 || bottomLeftBlock == 333 ||
			bottomLeftBlock == 302 || bottomLeftBlock == 308 || bottomLeftBlock == 336 || bottomLeftBlock == 306 || bottomLeftBlock == 307 || bottomLeftBlock == 309 ||
			bottomLeftBlock == 304 || bottomLeftBlock == 513 || bottomLeftBlock == 482 || bottomLeftBlock == 516 || bottomLeftBlock == 486 || bottomLeftBlock == 483 ||
			bottomLeftBlock == 489 || bottomLeftBlock == 488 || bottomLeftBlock == 487){
			float penetration = fabs((-TILE_SIZE * (worldToTileY(position[1]) + 1)) - (position[1] - size[1] / 2));
			position[1] += (penetration + 0.001);
			velocity[1] = 0.0f;
		}
		else if (bottomRightBlock == 101 || bottomRightBlock == 122 || bottomRightBlock == 123 || bottomRightBlock == 124 || bottomRightBlock == 126 || bottomRightBlock == 127 ||
			bottomRightBlock == 128 || bottomRightBlock == 129 || bottomRightBlock == 153 || bottomRightBlock == 155 || bottomRightBlock == 156 || bottomRightBlock == 333 ||
			bottomRightBlock == 302 || bottomRightBlock == 308 || bottomRightBlock == 336 || bottomRightBlock == 306 || bottomRightBlock == 307 || bottomRightBlock == 309 ||
			bottomRightBlock == 304 || bottomRightBlock == 513 || bottomRightBlock == 482 || bottomRightBlock == 516 || bottomRightBlock == 486 || bottomRightBlock == 483 ||
			bottomRightBlock == 489 || bottomRightBlock == 488 || bottomRightBlock == 487) {
			float penetration = fabs((-TILE_SIZE * (worldToTileY(position[1]) + 1)) - (position[1] - size[1] / 2));
			position[1] += (penetration + 0.001);
			velocity[1] = 0.0f;
		}
		int topLeftBlock = levelData[worldToTileY(position[1] + size[1] / 2)][worldToTileX(position[0] - size[0] / 2)];
		int topRightBlock = levelData[worldToTileY(position[1] + size[1] / 2)][worldToTileX(position[0] + size[0] / 2)];
		if (topLeftBlock == 101 || topLeftBlock == 122 || topLeftBlock == 123 || topLeftBlock == 124 || topLeftBlock == 126 || topLeftBlock == 127 ||
			topLeftBlock == 128 || topLeftBlock == 129 || topLeftBlock == 153 || topLeftBlock == 155 || topLeftBlock == 156 || topLeftBlock == 333 ||
			topLeftBlock == 302 || topLeftBlock == 308 || topLeftBlock == 336 || topLeftBlock == 306 || topLeftBlock == 307 || topLeftBlock == 309 ||
			topLeftBlock == 304 || topLeftBlock == 513 || topLeftBlock == 482 || topLeftBlock == 516 || topLeftBlock == 486 || topLeftBlock == 483 ||
			topLeftBlock == 489 || topLeftBlock == 488 || topLeftBlock == 487) {
			float penetration = fabs((position[1] + size[1] / 2) - ((-TILE_SIZE * (worldToTileY(position[1]) - 1) - TILE_SIZE)));
			position[1] -= (penetration + 0.001);
			velocity[1] = 0.0f;
		}
		else if (topRightBlock == 101 || topRightBlock == 122 || topRightBlock == 123 || topRightBlock == 124 || topRightBlock == 126 || topRightBlock == 127 ||
			topRightBlock == 128 || topRightBlock == 129 || topRightBlock == 153 || topRightBlock == 155 || topRightBlock == 156 || topRightBlock == 333 ||
			topRightBlock == 302 || topRightBlock == 308 || topRightBlock == 336 || topRightBlock == 306 || topRightBlock == 307 || topRightBlock == 309 ||
			topRightBlock == 304 || topRightBlock == 513 || topRightBlock == 482 || topRightBlock == 516 || topRightBlock == 486 || topRightBlock == 483 ||
			topRightBlock == 489 || topRightBlock == 488 || topRightBlock == 487) {
			float penetration = fabs((position[1] + size[1] / 2) - ((-TILE_SIZE * (worldToTileY(position[1]) - 1) - TILE_SIZE)));
			position[1] -= (penetration + 0.001);
			velocity[1] = 0.0f;
		}
	}

	void collisionX() {
		int leftTopBlock = levelData[worldToTileY(position[1] + size[1] / 2)][worldToTileX(position[0] - size[0] / 2)];
		int leftBottomBlock = levelData[worldToTileY(position[1] - size[1] / 2)][worldToTileX(position[0] - size[0] / 2)];
		if (leftTopBlock == 101 || leftTopBlock == 122 || leftTopBlock == 123 || leftTopBlock == 124 || leftTopBlock == 126 || leftTopBlock == 127 ||
			leftTopBlock == 128 || leftTopBlock == 129 || leftTopBlock == 153 || leftTopBlock == 155 || leftTopBlock == 156 || leftTopBlock == 333 ||
			leftTopBlock == 302 || leftTopBlock == 308 || leftTopBlock == 336 || leftTopBlock == 306 || leftTopBlock == 307 || leftTopBlock == 309 ||
			leftTopBlock == 304 || leftTopBlock == 513 || leftTopBlock == 482 || leftTopBlock == 516 || leftTopBlock == 486 || leftTopBlock == 483 ||
			leftTopBlock == 489 || leftTopBlock == 488 || leftTopBlock == 487) {
			float penetration = fabs(((TILE_SIZE * (worldToTileX(position[0]) - 1)) + TILE_SIZE) - (position[0] - size[0] / 2));
			position[0] += (penetration + 0.001);
			velocity[0] = 0.0f;
			acceleration[0] *= -1; // In the case of a collision on the X axis, enemy turns around
		}
		else if (leftBottomBlock == 101 || leftBottomBlock == 122 || leftBottomBlock == 123 || leftBottomBlock == 124 || leftBottomBlock == 126 || leftBottomBlock == 127 ||
			leftBottomBlock == 128 || leftBottomBlock == 129 || leftBottomBlock == 153 || leftBottomBlock == 155 || leftBottomBlock == 156 || leftBottomBlock == 333 ||
			leftBottomBlock == 302 || leftBottomBlock == 308 || leftBottomBlock == 336 || leftBottomBlock == 306 || leftBottomBlock == 307 || leftBottomBlock == 309 ||
			leftBottomBlock == 304 || leftBottomBlock == 513 || leftBottomBlock == 482 || leftBottomBlock == 516 || leftBottomBlock == 486 || leftBottomBlock == 483 ||
			leftBottomBlock == 489 || leftBottomBlock == 488 || leftBottomBlock == 487) {
			float penetration = fabs(((TILE_SIZE * (worldToTileX(position[0]) - 1)) + TILE_SIZE) - (position[0] - size[0] / 2));
			position[0] += (penetration + 0.001);
			velocity[0] = 0.0f;
			acceleration[0] *= -1;
		}
		int rightTopBlock = levelData[worldToTileY(position[0] + size[0] / 2)][worldToTileX(position[1] + size[1] / 2)];
		int rightBottomBlock = levelData[worldToTileY(position[0] - size[0] / 2)][worldToTileX(position[1] + size[1] / 2)];
		if (rightTopBlock == 101 || rightTopBlock == 122 || rightTopBlock == 123 || rightTopBlock == 124 || rightTopBlock == 126 || rightTopBlock == 127 ||
			rightTopBlock == 128 || rightTopBlock == 129 || rightTopBlock == 153 || rightTopBlock == 155 || rightTopBlock == 156 || rightTopBlock == 333 ||
			rightTopBlock == 302 || rightTopBlock == 308 || rightTopBlock == 336 || rightTopBlock == 306 || rightTopBlock == 307 || rightTopBlock == 309 ||
			rightTopBlock == 304 || rightTopBlock == 513 || rightTopBlock == 482 || rightTopBlock == 516 || rightTopBlock == 486 || rightTopBlock == 483 ||
			rightTopBlock == 489 || rightTopBlock == 488 || rightTopBlock == 487) {
			float penetration = fabs((position[0] + size[0] / 2) - (TILE_SIZE * (worldToTileX(position[0]) - 1)));
			position[0] -= (penetration + 0.001);
			velocity[0] = 0.0f;
			acceleration[0] *= -1;
		}
		else if (rightBottomBlock == 101 || rightBottomBlock == 122 || rightBottomBlock == 123 || rightBottomBlock == 124 || rightBottomBlock == 126 || rightBottomBlock == 127 ||
			rightBottomBlock == 128 || rightBottomBlock == 129 || rightBottomBlock == 153 || rightBottomBlock == 155 || rightBottomBlock == 156 || rightBottomBlock == 333 ||
			rightBottomBlock == 302 || rightBottomBlock == 308 || rightBottomBlock == 336 || rightBottomBlock == 306 || rightBottomBlock == 307 || rightBottomBlock == 309 ||
			rightBottomBlock == 304 || rightBottomBlock == 513 || rightBottomBlock == 482 || rightBottomBlock == 516 || rightBottomBlock == 486 || rightBottomBlock == 483 ||
			rightBottomBlock == 489 || rightBottomBlock == 488 || rightBottomBlock == 487) {
			float penetration = fabs((position[0] + size[0] / 2) - (TILE_SIZE * (worldToTileX(position[0]) - 1)));
			position[0] -= (penetration + 0.001);
			velocity[0] = 0.0f;
			acceleration[0] *= -1;
		}
	}
};

// Function to see if the player collided with an enemy
bool collideWithEnemy(Entity player, Enemy enemy) {
	if (((player.position[0] < enemy.position[0] + enemy.size[0] / 2) && (player.position[0] > enemy.position[0] - enemy.size[0] / 2)) && ((player.position[1] > enemy.position[1] - enemy.size[1] / 2) && (player.position[1] < enemy.position[1] + enemy.size[1] / 2))) {
		return true;
	}
	else {
		return false;
	}
}

int state = 0;

int main(int argc, char *argv[])
{
	SDL_Init(SDL_INIT_VIDEO);
	displayWindow = SDL_CreateWindow("My Game", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 360, SDL_WINDOW_OPENGL);
	SDL_GLContext context = SDL_GL_CreateContext(displayWindow);
	SDL_GL_MakeCurrent(displayWindow, context);
#ifdef _WINDOWS
	glewInit();
#endif

	glViewport(0, 0, 640, 360);

	Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 4096);

	ShaderProgram program(RESOURCE_FOLDER"vertex_textured.glsl", RESOURCE_FOLDER"fragment_textured.glsl");

	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	Matrix projectionMatrix;
	Matrix viewMatrix;

	projectionMatrix.setOrthoProjection(-3.55, 3.55, -2.0f, 2.0f, -1.0f, 1.0f);

	GLuint spriteSheetTexture = LoadTexture("spritesheet_rgba.png"); // Spritesheet
	GLuint fontTexture = LoadTexture("pixel_font.png"); // font

	Mix_Chunk *jump;
	jump = Mix_LoadWAV("jump.wav"); // jump sound

	Mix_Chunk *hurt;
	hurt = Mix_LoadWAV("hurt.wav"); // sound that plays when the player dies

	Mix_Chunk *levelComplete;
	levelComplete = Mix_LoadWAV("level_complete.wav"); // sound that plays when the player finishes a level

	Mix_Music *music;
	music = Mix_LoadMUS("Ketsa_-_This_Bright_Day.mp3"); // music

	Entity player({ 1.0f, -2.0f }, { 0.0f, 0.0f }, { 0.0f, 0.0f }, { 0.5f, 0.5f }, 0.0f, spriteSheetTexture, 79);

	// Three different vectors, one for each level
	vector<Enemy> enemiesLevel1;
	Enemy enemy1({ 4.0f, -2.0f }, { 0.0f, 0.0f }, { -1.0f, 0.0f }, { 0.5f, 0.5f }, 0.0f, spriteSheetTexture, 470);
	enemiesLevel1.push_back(enemy1);

	vector<Enemy> enemiesLevel2;
	Enemy enemy2({ 20.0f, -2.0f }, { 0.0f, 0.0f }, { -1.0f, 0.0f }, { 0.5f, 0.5f }, 0.0f, spriteSheetTexture, 441);
	enemiesLevel2.push_back(enemy2);

	vector<Enemy> enemiesLevel3;
	Enemy enemy3({ 20.0f, -3.0f }, { 0.0f, 0.0f }, { -1.0f, 0.0f }, { 0.5f, 0.5f }, 0.0f, spriteSheetTexture, 441);
	enemiesLevel3.push_back(enemy3);

	float lastFrameTicks = 0.0f;

	glUseProgram(program.programID);

	Mix_PlayMusic(music, -1);

	SDL_Event event;
	bool done = false;
	while (!done) {
		while (SDL_PollEvent(&event)) {
			if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE) {
				done = true;
			}
			else if (event.type == SDL_KEYDOWN) {
				if (event.key.keysym.scancode == SDL_SCANCODE_Q) {
					done = true; // Pressing Q at any time exits the game
				}
			}
			else if (event.type == SDL_KEYUP) {
				if (event.key.keysym.scancode == SDL_SCANCODE_UP) {
					if (state == 3 || state == 5 || state == 7) { // During a level
						player.velocity[1] = 2.5f; // Makes the player jump
						player.collidedBottom = FALSE; // Changes boolean flags
						player.landed = FALSE;
						Mix_PlayChannel(-1, jump, 0); // Play jump sound
					}
				}
				else if (event.key.keysym.scancode == SDL_SCANCODE_SPACE) {
					if (state == 0 || state == 1 || state == 2 || state == 4 || state == 6) { // During a title screen
						state++; // Advances to the next state
					}
				}
			}
		}

		glClear(GL_COLOR_BUFFER_BIT);

		if (state == 0) { // Beginning menu
			drawText(&program, fontTexture, "Block Man", 0.5f, 0.01f, -2.0f, 1.0f);
			drawText(&program, fontTexture, "Game Programming Final Project", 0.2f, 0.01f, -3.0f, 0.25f);
			drawText(&program, fontTexture, "By James Beck", 0.2f, 0.01f, -1.375f, -0.25f);
			drawText(&program, fontTexture, "Press Space to Continue", 0.2f, 0.01f, -2.5f, -1.5f);
			program.setProjectionMatrix(projectionMatrix);
			program.setViewMatrix(viewMatrix);
		}
		else if (state == 1) { // Instruction menu
			drawText(&program, fontTexture, "Instructions", 0.3f, 0.01f, -1.75f, 1.5f);
			drawText(&program, fontTexture, "Arrow keys to move", 0.2f, 0.01f, -1.8f, 0.75f);
			drawText(&program, fontTexture, "Q to quit", 0.2f, 0.01f, -0.85f, 0.25f);
			drawText(&program, fontTexture, "Press Space to Continue", 0.2f, 0.01f, -2.5f, -1.5f);
			program.setProjectionMatrix(projectionMatrix);
			program.setViewMatrix(viewMatrix);
		}
		else if (state == 2) { // Level 1 load screen
			drawText(&program, fontTexture, "Level 1", 0.5f, 0.01f, -1.5f, 0.5f);
			drawText(&program, fontTexture, "Press Space to Continue", 0.2f, 0.01f, -2.5f, -1.5f);
			program.setProjectionMatrix(projectionMatrix);
			program.setViewMatrix(viewMatrix);

			memcpy(levelData, level1Data, LEVEL_HEIGHT*LEVEL_WIDTH*sizeof(unsigned int)); // Copies level1Data into levelData so renderMap function can draw it

			// Starts keeping track of time now so that player and enemies won't "jump" when the player advances to the next screen
			float ticks = (float)SDL_GetTicks() / 1000.0f;
			float elapsed = ticks - lastFrameTicks;
			lastFrameTicks = ticks;
		}
		else if (state == 3) { // Level 1
			float ticks = (float)SDL_GetTicks() / 1000.0f;
			float elapsed = ticks - lastFrameTicks;
			lastFrameTicks = ticks;

			const Uint8 *keys = SDL_GetKeyboardState(NULL);

			player.acceleration[0] = 0.0f;

			if (keys[SDL_SCANCODE_LEFT]) {
				player.acceleration[0] = -5.0f; // Move left
			}
			else if (keys[SDL_SCANCODE_RIGHT]) {
				player.acceleration[0] = 5.0f; // Move right
			}

			renderMap(&program, spriteSheetTexture); // Draw map

			// Fixed timestep
			float fixedElapsed = elapsed;
			if (fixedElapsed > FIXED_TIMESTEP * MAX_TIMESTEPS) {
				fixedElapsed = FIXED_TIMESTEP * MAX_TIMESTEPS;
			}
			while (fixedElapsed >= FIXED_TIMESTEP) {
				fixedElapsed -= FIXED_TIMESTEP;
				player.Update(FIXED_TIMESTEP); // Update player
				for (int i = 0; i < enemiesLevel1.size(); i++) {
					enemiesLevel1[i].Update(FIXED_TIMESTEP); // Update enemies
				}
				for (int i = 0; i < enemiesLevel1.size(); i++) {
					if (collideWithEnemy(player, enemiesLevel1[i])) { // Check if an enemy collided with the player
						state = 9;
					}
				}
			}

			player.Update(elapsed); // Update player
			for (int i = 0; i < enemiesLevel1.size(); i++) {
				enemiesLevel1[i].Update(elapsed); // Update enemies
			}
			for (int i = 0; i < enemiesLevel1.size(); i++) {
				if (collideWithEnemy(player, enemiesLevel1[i])) { // Check if an enemy collided with the player
					state = 9; // If so, game over
				}
			}
			player.Draw(&program); // draw player
			for (int i = 0; i < enemiesLevel1.size(); i++) {
				enemiesLevel1[i].Draw(&program); // draw enemies
			}

			program.setProjectionMatrix(projectionMatrix);
			viewMatrix.identity();
			viewMatrix.Translate(-player.position[0], -player.position[1], 0.0f); // adjust viewMatrix so it follows the player
			program.setViewMatrix(viewMatrix);

			if (!player.alive) { // If player is dead (signalled by boolean flag)
				state = 9; // Game over
				Mix_PlayChannel(-1, hurt, 0); // play game over sound
			}

			if (player.levelComplete) { // If the player reaches the end of the level (signalled by the boolean flag)
				state++; // Update state
				Mix_PlayChannel(-1, levelComplete, 0); // Play level complete sound
			}

			if (player.landed) { // If the player went from being in the air to hitting the ground
				float screenShakeValue = 0.0f;
				screenShakeValue += elapsed;
				viewMatrix.Translate(sin(screenShakeValue * 0.25f) * 5.0f, sin(screenShakeValue * 0.25f) * 5.0f, 0.0f); // Screen shake!
				program.setViewMatrix(viewMatrix);
				player.collidedBottom = TRUE; // Reset boolean flags
				player.landed = FALSE;
			}
		}
		else if (state == 4) {
			drawText(&program, fontTexture, "Level 2", 0.5f, 0.01f, -1.5f, 0.5f);
			drawText(&program, fontTexture, "Press Space to Continue", 0.2f, 0.01f, -2.5f, -1.5f);
			program.setProjectionMatrix(projectionMatrix);
			viewMatrix.identity();
			program.setViewMatrix(viewMatrix);

			memcpy(levelData, level2Data, LEVEL_HEIGHT*LEVEL_WIDTH*sizeof(unsigned int)); // Load in level 2 data

			player.levelComplete = false; // Reset boolean flags
			player.acceleration = { 0.0f, 0.0f }; // Reset player values
			player.velocity = { 0.0f, 0.0f };
			player.position = {1.0f, -2.0f};

			float ticks = (float)SDL_GetTicks() / 1000.0f;
			float elapsed = ticks - lastFrameTicks;
			lastFrameTicks = ticks;
		}
		else if (state == 5) {
			float ticks = (float)SDL_GetTicks() / 1000.0f;
			float elapsed = ticks - lastFrameTicks;
			lastFrameTicks = ticks;

			const Uint8 *keys = SDL_GetKeyboardState(NULL);

			player.acceleration[0] = 0.0f;

			if (keys[SDL_SCANCODE_LEFT]) {
				player.acceleration[0] = -5.0f;
			}
			else if (keys[SDL_SCANCODE_RIGHT]) {
				player.acceleration[0] = 5.0f;
			}

			renderMap(&program, spriteSheetTexture);

			float fixedElapsed = elapsed;
			if (fixedElapsed > FIXED_TIMESTEP * MAX_TIMESTEPS) {
				fixedElapsed = FIXED_TIMESTEP * MAX_TIMESTEPS;
			}
			while (fixedElapsed >= FIXED_TIMESTEP) {
				fixedElapsed -= FIXED_TIMESTEP;
				player.Update(FIXED_TIMESTEP);
				for (int i = 0; i < enemiesLevel2.size(); i++) {
					enemiesLevel2[i].Update(FIXED_TIMESTEP);
				}
				for (int i = 0; i < enemiesLevel2.size(); i++) {
					if (collideWithEnemy(player, enemiesLevel2[i])) {
						state = 9;
					}
				}
			}

			player.Update(elapsed);
			for (int i = 0; i < enemiesLevel2.size(); i++) {
				enemiesLevel2[i].Update(elapsed);
			}
			for (int i = 0; i < enemiesLevel2.size(); i++) {
				if (collideWithEnemy(player, enemiesLevel2[i])) {
					state = 9;
				}
			}
			player.Draw(&program);
			for (int i = 0; i < enemiesLevel2.size(); i++) {
				enemiesLevel2[i].Draw(&program);
			}

			program.setProjectionMatrix(projectionMatrix);
			viewMatrix.identity();
			viewMatrix.Translate(-player.position[0], -player.position[1], 0.0f);
			program.setViewMatrix(viewMatrix);

			if (!player.alive) {
				state = 9;
				Mix_PlayChannel(-1, hurt, 0);
			}

			if (player.levelComplete) {
				state++;
				Mix_PlayChannel(-1, levelComplete, 0);
			}

			if (player.landed) {
				float screenShakeValue = 0.0f;
				screenShakeValue += elapsed;
				viewMatrix.Translate(sin(screenShakeValue * 0.25f) * 5.0f, sin(screenShakeValue * 0.25f) * 5.0f, 0.0f);
				program.setViewMatrix(viewMatrix);
				player.collidedBottom = TRUE;
				player.landed = FALSE;
			}
		}
		else if (state == 6) {
			drawText(&program, fontTexture, "Level 3", 0.5f, 0.01f, -1.5f, 0.5f);
			drawText(&program, fontTexture, "Press Space to Continue", 0.2f, 0.01f, -2.5f, -1.5f);
			program.setProjectionMatrix(projectionMatrix);
			viewMatrix.identity();
			program.setViewMatrix(viewMatrix);

			memcpy(levelData, level3Data, LEVEL_HEIGHT*LEVEL_WIDTH*sizeof(unsigned int)); // Load in level 3 data

			player.levelComplete = false;
			player.acceleration = { 0.0f, 0.0f };
			player.velocity = { 0.0f, 0.0f };
			player.position = { 1.0f, -2.0f };

			float ticks = (float)SDL_GetTicks() / 1000.0f;
			float elapsed = ticks - lastFrameTicks;
			lastFrameTicks = ticks;
		}
		else if (state == 7) {
			float ticks = (float)SDL_GetTicks() / 1000.0f;
			float elapsed = ticks - lastFrameTicks;
			lastFrameTicks = ticks;

			const Uint8 *keys = SDL_GetKeyboardState(NULL);

			player.acceleration[0] = 0.0f;

			if (keys[SDL_SCANCODE_LEFT]) {
				player.acceleration[0] = -5.0f;
			}
			else if (keys[SDL_SCANCODE_RIGHT]) {
				player.acceleration[0] = 5.0f;
			}

			renderMap(&program, spriteSheetTexture);

			float fixedElapsed = elapsed;
			if (fixedElapsed > FIXED_TIMESTEP * MAX_TIMESTEPS) {
				fixedElapsed = FIXED_TIMESTEP * MAX_TIMESTEPS;
			}
			while (fixedElapsed >= FIXED_TIMESTEP) {
				fixedElapsed -= FIXED_TIMESTEP;
				player.Update(FIXED_TIMESTEP);
				for (int i = 0; i < enemiesLevel3.size(); i++) {
					enemiesLevel3[i].Update(FIXED_TIMESTEP);
				}
				for (int i = 0; i < enemiesLevel3.size(); i++) {
					if (collideWithEnemy(player, enemiesLevel3[i])) {
						state = 9;
					}
				}
			}

			player.Update(elapsed);
			for (int i = 0; i < enemiesLevel3.size(); i++) {
				enemiesLevel3[i].Update(elapsed);
			}
			for (int i = 0; i < enemiesLevel3.size(); i++) {
				if (collideWithEnemy(player, enemiesLevel3[i])) {
					state = 9;
				}
			}
			player.Draw(&program);
			for (int i = 0; i < enemiesLevel3.size(); i++) {
				enemiesLevel3[i].Draw(&program);
			}

			program.setProjectionMatrix(projectionMatrix);
			viewMatrix.identity();
			viewMatrix.Translate(-player.position[0], -player.position[1], 0.0f);
			program.setViewMatrix(viewMatrix);

			if (!player.alive) {
				state = 9;
				Mix_PlayChannel(-1, hurt, 0);
			}

			if (player.levelComplete) {
				state++;
				Mix_PlayChannel(-1, levelComplete, 0);
			}

			if (player.landed) {
				float screenShakeValue = 0.0f;
				screenShakeValue += elapsed;
				viewMatrix.Translate(sin(screenShakeValue * 0.25f) * 5.0f, sin(screenShakeValue * 0.25f) * 5.0f, 0.0f);
				program.setViewMatrix(viewMatrix);
				player.collidedBottom = TRUE;
				player.landed = FALSE;
			}
		}
		else if (state == 8) {
			drawText(&program, fontTexture, "You Win!", 0.5f, 0.01f, -1.875f, 0.75f);
			drawText(&program, fontTexture, "Press Q to Quit", 0.2f, 0.01f, -1.5f, 0.25f);
			program.setProjectionMatrix(projectionMatrix);
			viewMatrix.identity();
			program.setViewMatrix(viewMatrix);
		}
		else if (state == 9) {
			drawText(&program, fontTexture, "Game Over!", 0.5f, 0.01f, -2.175f, 0.75f);
			drawText(&program, fontTexture, "Press Q to Quit", 0.2f, 0.01f, -1.5f, 0.25f);
			program.setProjectionMatrix(projectionMatrix);
			viewMatrix.identity();
			program.setViewMatrix(viewMatrix);
		}

		SDL_GL_SwapWindow(displayWindow);
	}

	// Free up sound
	Mix_FreeChunk(jump);
	Mix_FreeChunk(hurt);
	Mix_FreeChunk(levelComplete);

	Mix_FreeMusic(music);

	SDL_Quit();
	return 0;
}